// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/api"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/api/handler"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/api/middleware"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/config"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/db"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/repository"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/service/google"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/service/token"
	"github.com/nikhilnarayanan623/server/react-go-messenger/pkg/usecase"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*http.Server, error) {
	gormDB, err := db.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	authRepository := repository.NewAuthRepository(gormDB)
	tokenService := token.NewTokenService(cfg)
	googleAuth := google.NewGoogleAuth(cfg)
	userRepository := repository.NewUserRepository(gormDB)
	authUseCase := usecase.NewAuthUseCase(authRepository, tokenService, googleAuth, userRepository)
	authHandler := handler.NewAuthHandler(authUseCase)
	middlewareMiddleware := middleware.NewMiddleware(tokenService)
	chatRepository := repository.NewChatRepository(gormDB)
	chatUseCase := usecase.NewChatUseCase(chatRepository)
	chatHandler := handler.NewChatHandler(chatUseCase)
	server := http.NewServerHTTP(cfg, authHandler, middlewareMiddleware, chatHandler)
	return server, nil
}
